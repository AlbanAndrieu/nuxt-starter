---
stages:
  - static
  - test
  - build
  - train
  - deploy
  - notify
  - dependabot
  - publish

include:
  - project: jusmundi-group/infrastructure/ci-templates
    ref: main
    file: "/templates/default.gitlab-ci.yml"

  - project: jusmundi-group/infrastructure/ci-templates
    ref: main
    file: "/templates/docker-build.gitlab-ci.yml"

  - project: jusmundi-group/infrastructure/ci-templates
    ref: main
    file: "/templates/deploy-nomad.gitlab-ci.yml"

  - project: jusmundi-group/infrastructure/ci-templates
    ref: main
    file: "/templates/test-python.gitlab-ci.yml"

  - project: jusmundi-group/infrastructure/ci-templates
    ref: main
    file: "/templates/javascript.gitlab-ci.yml"

  - project: jusmundi-group/infrastructure/ci-templates
    ref: main
    file: "/templates/_apk.gitlab-ci.yml"

  - project: jusmundi-group/infrastructure/ci-templates
    ref: main
    file: "/templates/data.gitlab-ci.yml"

  - project: jusmundi-group/infrastructure/ci-templates
    ref: main
    file: "/templates/mega-linter.gitlab-ci.yml"

  - component: $CI_SERVER_FQDN/to-be-continuous/semantic-release/gitlab-ci-semrel@3.11.2
    inputs:
      dry-run: false
      changelog-enabled: true
      changelog-title: "My changelog"
      auto-release-enabled: true
      info-on: all

default:
  cache: &global_cache
    # key: $CI_COMMIT_REF_SLUG
    # Cache modules using lock file
    key:
      files:
        - package-lock.json
    paths:
      # This folder is cached between builds
      # https://docs.gitlab.com/ee/ci/yaml/#cache
      - node_modules/
      # # Cache modules in between jobs
      - .npm/
      # - public/
      # - vendor/
    policy: pull-push

# See https://docs.gitlab.com/ee/ci/yaml/#workflowauto_cancelon_new_commit
# workflow:
#   auto_cancel:
#     on_new_commit: interruptible
#     on_job_failure: all

variables:
  CI_REGISTRY: registry.gitlab.com
  OCI_REGISTRY: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}
  TYPE_TRAINING: ""
  # MOUNT_POINT: "/builds/$CI_PROJECT_PATH/mnt"
  # REGISTRY: 783876277037.dkr.ecr.eu-west-3.amazonaws.com
  CI_IMAGE_NAME: ${CI_REGISTRY}/jusmundi-group/web/templates/jm-oci/jm-ubuntu
  CI_IMAGE_TAG: latest
  GIT_STRATEGY: clone
  GIT_DEPTH: "3"
  FLAVOR: "-javascript"
  TRIVY_SCANNERS: "vuln,misconfig"
  CS_SEVERITY_THRESHOLD: "CRITICAL"
  CS_SEVERITY_FILESYTEM_THRESHOLD: "CRITICAL" # CRITICAL,HIGH
  TRIVY_GLOBAL_IGNORE_FILE: "--ignorefile .trivyignore.yaml"
  # TRIVY_GLOBAL_SECURITY_CHECKS_EXTRA: "--ignore-unfixed --ignorefile .trivyignore.yaml --ignored-licenses LGPL-2.0,LGPL-2.1,LGPL-3.0"
  # DD_GLOBAL_SECURITY_CHECKS_EXTRA: "--ignore-unfixed --ignorefile .trivyignore.yaml --ignored-licenses LGPL-2.0,LGPL-2.1,LGPL-3.0"
  TRIVY_ARGS: "--skip-dirs .direnv --skip-dirs .venv --skip-dirs .node_cache --skip-dirs code/node_modules/ --skip-dirs go/go/pkg/mod/github.com/ --skip-dirs /usr/bin/go/pkg/mod/github.com/ --skip-dirs code/.venv/ --skip-dirs node_modules --skip-dirs usr/lib/node_modules/ --skip-files pip.conf --skip-files Pipfile" #  --insecure  --debug
  DD_ARGS: "${TRIVY_ARGS}"
  TRIVY_FS_ARGS: "${TRIVY_ARGS}  --skip-files package-lock.json --skip-files yarn.lock"
  DD_PRODUCT_NAME: "$CI_PROJECT_NAME"
  DD_SERVICE: "test"  # nuxt-starter
  DD_PRODUCT_TYPE_NAME: "Showcase Alban" # "Research and Development"
  DD_URL_UAT: "http://defectdojo.service.gra.uat.consul" # 10.30.0.141
  DD_TEST_NAME: "JM Trivy"
  DD_GIT_REPOSITORY_URL: "$(git config --get remote.origin.url)" # NOK
  DD_GIT_COMMIT_SHA: "$(git rev-parse HEAD)" # NOK
  # DD_FILE_NAME: "trivy.json"
  DD_MINIMUM_SEVERITY: "MEDIUM"
  # DD_GROUP_BY: ""
  DD_CLOSE_OLD_FINDINGS: "True"
  DD_CLOSE_OLD_FINDINGS_PRODUCT_SCOPE: "True"
  DD_DO_NOT_REACTIVATE: "False"
  DD_BRANCH_TAG: "${CI_COMMIT_TAG}" # CI_COMMIT_BRANCH CI_IMAGE_TAG
  # DOCKER_BUILD_OPT: " -f Dockerfile --secret id=read-package-token,env=CI_PIP_GITLABJUSMUNDI_TOKEN"
  CLOC_SOURCE: "nabla"
  # RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  # FF_NETWORK_PER_BUILD: "true" # enable network per build so all services can communicate on the same network
  APP_NAME: nuxt-starter
  # DAST_WEBSITE: https://yourapp
  DAST_WEBSITE: https://nuxt-starter.service.gra.${ENV}.consul
  DAST_FULL_SCAN_ENABLED: "true" # do a full scan
  DAST_BROWSER_SCAN: "true" # use the browser-based GitLab DAST crawler
  NOMAD_ENV_DEPLOY: "-var env=${ENV} -var team=${TEAM}"
  NOMAD_SERVICE_DEPLOY_URL_SUFFIX: docs # citemap/ping
  NOMAD_SERVICE_DEPLOY_URL: http://${APP_NAME}.service.gra.${ENV}.consul/${NOMAD_SERVICE_DEPLOY_URL_SUFFIX}
  DEFAULT_POETRY_OPT_GROUPS: "format,test,extras,open_telemetry,deployment,influxdb,panda"
  DEPENDENCY_UPDATES_DISABLED: false
  # GIT_CLONE_PATH: '$CI_BUILDS_DIR/$CI_PROJECT_NAME/$CI_PIPELINE_ID'
  # GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_PATH
  MEGALINTER_EXIT_ON_FAILURE: 1
  # LINTER_RULES_PATH: .
  # Improve the (de-)compression speed by using a more efficient ZIP implementation
  FF_USE_FASTZIP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"
  # Force-enable BuildKit in "docker build" commands (on Linux it is disabled by default)
  DOCKER_BUILDKIT: 1
  DEFAULT_COV_ARGS: "--no-ddtrace --no-cov" # --cov-fail-under=1

# See https://docs.gitlab.com/user/packages/npm_registry/?tab=%60npm+config%60#publish-a-package-with-a-cicd-pipeline
install-npm:
  extends: .install-npm
  script:
    # - npm config set @scope:registry=https://gitlab.com/api/v4/groups/2454528/-/packages/npm/
    # - npm config set '@jusmundi-group:registry=https://gitlab.com/api/v4/projects/60435718/packages/npm/'
    # - npm config set '@jusmundi-group:registry=https://gitlab.com/api/v4/packages/npm/:_authToken='"${CI_JOB_TOKEN}"
    # - echo "@scope:registry=https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/" > ~/.npmrc
    - echo "@jusmundi-group:registry=https://gitlab.com/api/v4/packages/npm/" > ~/.npmrc
    # - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> ~/.npmrc
    - echo "//${CI_SERVER_HOST}/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> ~/.npmrc
    # - rm -rf node_modules package-lock.json
    - |
      if [ -e yarn.lock ]; then
      yarn install --frozen-lockfile
      elif [ -e package-lock.json ]; then
      npm i --cache .npm --prefer-offline --no-audit
      fi
  cache:
    # inherit all global cache settings
    <<: *global_cache
  artifacts:
    paths:
      - node_modules
    expire_in: 6 hours # your GitLab instance will have a default, you can override it like this
    when: on_success # don't attempt to upload the docs if generating them failed
  allow_failure: false

lint-eslint-npm:
  extends: .lint-eslint-npm
  script:
    - npm test --cache .npm
    - npx eslint --format gitlab .
  allow_failure: false
  cache:
    # inherit all global cache settings
    <<: *global_cache
    # override the policy
    policy: pull
  artifacts:
    reports:
      codequality: gl-codequality.json

unit-tests-npm:
  extends: .unit-tests-npm
  needs: ["install-npm"]
  dependencies:
    - install-npm
  allow_failure: false
  cache:
    # inherit all global cache settings
    <<: *global_cache
    # override the policy
    policy: pull

mega_linter:
  extends: .mega_linter_common
  needs: ["test-pytest"]
  tags:
    - jusmundi-nomad-runner
  allow_failure: false

.build-image-dockefile-pre: &build-image-dockefile-pre
  script:
    # --target builder-base
    - export DOCKER_BUILD_OPT="--pull --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from ${TEST_CACHE_TAG} -f Dockerfile --secret id=read-package-token,env=CI_PIP_GITLABJUSMUNDI_TOKEN --secret id=read-npm-token,env=CI_JOB_TOKEN --build-arg ENV=${ENV} -t ${CONTAINER_IMAGE}"
    - echo -e "\e[35mOverriden on purpose as Sample docker build need explicit \e[0m FOR \e[43m${ENV} - ${DOCKER_BUILD_OPT}.\e[0m"

docker-build:
  extends: .docker-build
  needs: ["install-npm"]
  tags:
    - jusmundi-nomad-runner
    # - docker # no space left on device
  timeout: 2 hours 10 minutes
  variables:
    # CUSTOM_CONTAINER_SCANNING_DISABLED: "true"
    # CONTAINER_SCANNING_GITLAB_CODEQUALITY_TEMPLATE_DISABLE: "true"
    TRIVY_TIMEOUT: "20m0s"
    # TRIVY_GLOBAL_SETTINGS: --no-progress --cache-dir=${TRIVY_CACHE_DIR} --skip-db-update --skip-java-db-update --skip-check-update
    # TRIVY_EXIT_ON_FAILURE: 0
  before_script:
    - !reference [.env-definition, script]
    - !reference [.oci-image, script]
    - !reference [.login-gitlab-docker, script]
    - echo -e "\e[35mWe are in directory\e[0m."
    - pwd
    # - echo -e "\e[35mWe have files\e[0m."
    # - ls -lrta
    - !reference [.build-image-dockefile-pre, script]
    - !reference [.build-image-dockefile, script]
    - echo -e "\e[35mImage generated\e[0m."
    - echo -e "\e[35mOCI_IMAGE=${OCI_IMAGE}\e[0m."

publish-npm:
  extends: .publish-npm
  needs: ["install-npm"]
  dependencies:
    - install-npm
  tags:
    - jusmundi-nomad-runner
  script:
    # If no .npmrc is included in the repo, generate a temporary one that is configured to publish to GitLab's NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information: https://docs.gitlab.com/ee/user/packages/npm_registry/#with-the-npmrc-file'
        {
          echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
          echo "${CI_API_V4_URL#http*:}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
        } >> .npmrc
      fi
    - echo "Created the following .npmrc:"; cat .npmrc

    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    # If $SIGSTORE_ID_TOKEN is set this template will generate a provenance
    # document. For more information refer to the documentation: https://docs.gitlab.com/ee/ci/yaml/signing_examples/
    - |
      if [[ "$(npm view ${NPM_PACKAGE_NAME} versions)" != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        if [[ -n "${SIGSTORE_ID_TOKEN}" ]]; then
          npm publish --provenance
        else
          npm publish
        fi
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi

netlify:
  image: node:22-alpine
  state: .static
  variables:
    NETLIFY_SITE_ID: '8dc3759f-f33d-424d-9300-d21f859ca183'
  script:
    - npm install netlify-cli -g
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
